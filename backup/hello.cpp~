#include <signal.h>
#include <fcntl.h>
#include <stdio.h>
#include <time.h>

static void sig_usr(int signo);
static void sig_pipe(int signo);

static void child_process();

int main()
{
  signal(SIGUSR1, sig_usr);
  signal(SIGPIPE, sig_pipe);

  int pid;
  char buf[] = "hello";
  static int fd = 0;
  fd = open("./tmp", O_WRONLY, 0);
    

//  for(;;){
    pid = fork();
    if(pid == 0) // child process
    {
      child_process();
    }else{
      while(1){
        write(fd,  buf, sizeof(buf));
      }
      //pause();
      
    }
 // }

  return 0;
  
}

static void child_process(){
  printf("in child process\n");
  char buf[6]="\0";
  static int fd = 0;
  if(fd == 0)
    fd = open("./tmp", O_RDONLY, 0);
  //while(1){
    read(fd, buf, sizeof(buf));
    printf("rcv buf: %s\n", buf);
    sleep(1);
 // }
 // kill(getpid(), SIGUSR1);
  close(fd);
}

static void sig_usr(int signo){
  if(signo == SIGUSR1)
    printf("receive a sigusr1\n");
}

static void sig_pipe(int signo){
  if(signo == SIGPIPE)
    printf("receive a SIGPIPE\n");
}
